
//Take a look at wiki description of Connect Four game:

Wiki Connect Four

The grid is 6 row by 7 columns, those being named from A to G.

You will receive a list of strings showing the order of the pieces which dropped in columns:

  piecesPositionList = ["A_Red",
                        "B_Yellow",
                        "A_Red",
                        "B_Yellow",
                        "A_Red",
                        "B_Yellow",
                        "G_Red",
                        "B_Yellow"]
The list may contain up to 42 moves and shows the order the players are playing.

The first player who connects four items of the same color is the winner.

You should return "Yellow", "Red" or "Draw" accordingly.

SOLUTION
function whoIsWinner(piecesPositionList) {
  // Create a 2D array to represent the grid
  const grid = [    [null, null, null, null, null, null, null],
    [null, null, null, null, null, null, null],
    [null, null, null, null, null, null, null],
    [null, null, null, null, null, null, null],
    [null, null, null, null, null, null, null],
    [null, null, null, null, null, null, null]
  ];

  // Loop through the list of moves
  for (let i = 0; i < piecesPositionList.length; i++) {
    // Get the column letter and the color of the piece
    const column = piecesPositionList[i][0];
    const color = piecesPositionList[i].split('_')[1];

    // Convert the column letter to a number (0-6)
    const colIndex = column.charCodeAt(0) - 'A'.charCodeAt(0);

    // Find the first empty cell in the column and place the piece there
    let rowIndex = 5;
    while (rowIndex >= 0 && grid[rowIndex][colIndex] !== null) {
      rowIndex--;
    }

    // If the column is full, ignore the move
    if (rowIndex < 0) continue;

    // Place the piece on the grid
    grid[rowIndex][colIndex] = color;

    // Check for a win on the entire grid
    if (checkWin(grid)) return color;
  }

  // No winner was found
  return 'Draw';
}

// This function checks if there is a win on the entire grid
function checkWin(grid) {
  // Check each cell in the grid
  for (let row = 0; row < 6; row++) {
    for (let col = 0; col < 7; col++) {
      // Skip empty cells
      if (grid[row][col] === null) continue;

      // Check for a win starting from this cell
      if (checkWinFromCell(grid, row, col)) return true;
    }
  }

  // No win was found
  return false;
}

// This function checks for a win starting from the given cell
function checkWinFromCell(grid, row, col) {
  // Get the color of the cell
  const color = grid[row][col];

  // Check horizontal win
  let count = 0;
  for (let i = 0; i < 7; i++) {
    if (grid[row][i] === color) count++;
    else count = 0;
    if (count >= 4) return true;
  }

  // Check vertical win
  count = 0;
  for (let i = 0; i < 6; i++) {
    if (grid[i][col] === color) count++;
    else count = 0;
    if (count >= 4) return true;
  }

  // Check diagonal win (top-left to bottom-right)
  count = 0;
  for (let i = row, j = col; i >= 0 && j >= 0; i--, j--) {
    if (grid[i][j] !== color) break;
    count++;
  }
  for (let i = row + 1, j = col + 1; i < 6 && j < 7; i++, j++) {
    if (grid[i][j] !== color) break;
    count++;
  }
  if (count >= 4) return true;

  // Check diagonal win (top-right to bottom-left)
  count = 0;
  for (let i = row, j = col; i >= 0 && j < 7; i--, j++) {
    if (grid[i][j] !== color) break;
    count++;
  }
  for (let i = row + 1, j = col - 1; i < 6 && j >= 0; i++, j--) {
if (grid[i][j] !== color) break;
count++;
}
if (count >= 4) return true;

// No win found
return false;
}
