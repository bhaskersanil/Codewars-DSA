Create a function that takes a positive integer and returns the next bigger number that can be formed by rearranging its digits. For example:

12 ==> 21
513 ==> 531
2017 ==> 2071
nextBigger(num: 12)   // returns 21
nextBigger(num: 513)  // returns 531
nextBigger(num: 2017) // returns 2071
If the digits can't be rearranged to form a bigger number, return -1 (or nil in Swift):

9 ==> -1
111 ==> -1
531 ==> -1
nextBigger(num: 9)   // returns nil
nextBigger(num: 111) // returns nil
nextBigger(num: 531) // returns nil

function nextBigger(num) {
  // Convert the number to a string to make it easier to work with its digits
  var numString = num.toString();

  // Find the rightmost non-increasing suffix
  var suffixStart = numString.length - 1;
  while (suffixStart > 0 && numString[suffixStart - 1] >= numString[suffixStart]) {
    suffixStart--;
  }

  // If the entire number is non-increasing, it can't be rearranged to form a bigger number
  if (suffixStart == 0) {
    return -1;
  }

  // Find the rightmost element that is greater than the element to its left
  var pivot = suffixStart - 1;
  var pivotValue = numString[pivot];
  var rightmost = numString.length - 1;
  while (numString[rightmost] <= pivotValue) {
    rightmost--;
  }

  // Swap the pivot element with the rightmost element that is greater than it
  var newNumString = numString.substring(0, pivot) + numString[rightmost] + numString.substring(pivot + 1, rightmost) + pivotValue + numString.substring(rightmost + 1);

  // Reverse the suffix to get the smallest possible number
  newNumString = newNumString.substring(0, suffixStart) + newNumString.substring(suffixStart).split('').reverse().join('');

  // Convert the modified string back to a number and return it
  return parseInt(newNumString);
}
