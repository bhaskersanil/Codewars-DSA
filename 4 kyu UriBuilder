Create a basic UriBuilder object that will be used specifically to build query params on an existing URI. It should support a params property and a build method. It will handle the URL having pre-existing params that need to be managed. The URL must be properly encoded (i.e. "a b" should be encoded as "a%20b")

Examples of how the builder will be used:


var builder = new UriBuilder('http://www.codewars.com')
builder.params.page = 1
builder.params.language = 'javascript'

// new builder instance to demonstrate pre-existing params.
builder = new UriBuilder('http://www.codewars.com?page=1')

builder.params.page = 2
// should return 'http://www.codewars.com?page=2'
builder.build()

// if you delete params then they will disappear from the url string
delete builder.params.page

// should return 'http://www.codewars.com'
builder.build()
Note: For extra style points you can have your solution handle array values as query parameters, however there are no tests that explicitly test for them.

class UriBuilder {
  constructor(uri) {
    this.uri = uri;
    this.params = {};

    let splitUri = uri.split("?");
    if (splitUri.length > 1) {
      let paramString = splitUri[1];
      let params = paramString.split("&");
      for (let param of params) {
        let keyValue = param.split("=");
        this.params[keyValue[0]] = decodeURIComponent(keyValue[1]);
      }
    }
  }

  build() {
    let paramString = "";
    for (let key in this.params) {
      paramString += `${key}=${encodeURIComponent(this.params[key])}&`;
    }
    if (paramString.length > 0) {
      paramString = "?" + paramString.slice(0, -1);
    }
    return this.uri.split("?")[0] + paramString;
  }
}
